1.
Q:  Fattest path. Given an edge-weighted digraph and two vertices s and t, design an E*log(E) algorithm to 
find a fattest path from s to t. The bottleneck capacity of a path is the minimum weight of an edge on the 
path. A fattest path is a path such that no other path has a higher bottleneck capacity.

A:  You could run some modified Maximum flow where only one flow can cross a sudo end vertex (that only 
connects to T) Or just simply run some altered dijkstra where is is prioritized by the bottle neck of a path 
(use a MaxHeap).

Hint:   design a linear-time subroutine that takes a real-number T and determines if there is a path from s 
to t of bottleneck capacity greater than or equal to T.


2.
Q:  Perfect matchings in k-regular bipartite graphs. Suppose that there are n men and n women at a dance and 
that each man knows exactly k women and each woman knows exactly k men (and relationships are mutual). Show 
that it is always possible to arrange a dance so that each man and woman are matched with someone they know.

A:  If everyone knows exactly one person then the pairs are the one person they already know. Then is another
person is added to the list of people that someone knows, you can just ignore them because there is already a 
way. This pattern continues for whatever K is (except 0 for obvious reasons).

Hint:   formulate the bipartite matching problem as a max-flow problem; find a (fractional) feasible flow of 
value n; conclude that there is a perfect matching.


3.
Q:  Maximum weight closure problem. A subset of vertices S in a digraph is closed if there are no edges 
pointing from S to a vertex outside S. Given a digraph with weights (positive or negative) on the vertices, 
find a closed subset of vertices of maximum total weight.

A:  This seams like a min cut problem but I am not sure the exact way to proceed.

Hint:   formulate as a min-cut problem; assign edge (v,w) a weight of infinity if there is an edge from v to w 
in the original digraph.