1.
Q:  Bottleneck minimum spanning tree. Given a connected edge-weighted graph, design an efficient algorithm to 
find a minimum bottleneck spanning tree. The bottleneck capacity of a spanning tree is the weights of its 
largest edge. A minimum bottleneck spanning tree is a spanning tree of minimum bottleneck capacity.
A:  ? -> don't understand to question
Hint:   prove that an MST is a minimum bottleneck spanning tree.
Extra challenge: Compute a minimum bottleneck spanning tree in linear time in the worst case. Assume that you 
can compute the median of n keys in linear time in the worst case.Extra challenge: Compute a minimum 
bottleneck spanning tree in linear time in the worst case. Assume that you can compute the median of n keys 
in linear time in the worst case.

2.
Q:  Is an edge in a MST. Given an edge-weighted graph G and an edge e, design a linear-time algorithm to 
determine whether e appears in some MST of G.
Note: Since your algorithm must take linear time in the worst case, you cannot afford to compute the MST 
itself.
A:  It appears in an MST of G if that edge is the shortest path from its 2 points. DFS all the edges from one 
of the end points?
Hint:   consider the subgraph Gâ€² of G containing only those edges whose weight is strictly less than that of 
e.

3.
Q:  Minimum-weight feedback edge set. A feedback edge set of a graph is a subset of edges that contains at 
least one edge from every cycle in the graph. If the edges of a feedback edge set are removed, the resulting 
graph is acyclic. Given an edge-weighted graph, design an efficient algorithm to find a feedback edge set of 
minimum weight. Assume the edge weights are positive.
A:  DFS the graph. Have a set that contains all the nodes that have gone past. If you reach a point that was 
already visited, add to the list of edges, the smallest edge in the set. When returning from the DFS, remove 
the node that is currently on.
Hint:   complement of an MST.