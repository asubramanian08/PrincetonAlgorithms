1.
Q:  2-sum. Given an array a of n 64-bit integers and a target value T, determine whether there are two 
distinct integers i and j such that ai+aj=T. Your algorithm should run in linear time in the worst case.
A:  (If the array is already sorted) Use the 2 pointer method. i should start at 0 and j at the end. If the 
sum if less than T increment I, greater decrement j, else that is the answer. One i = j then there is no 
solution. (I think this is not the way they want me to do it but it is a solution).
Hint:   sort the array in linear time.

2.
Q:  Given an array of n objects with integer keys between 0 and Râˆ’1, design a linear-time algorithm to 
rearrange them in ascending order. Use extra space at most proportional to $R$$.
A:  Key counting index algorithms would be good here. Put the number of times I some up in array[I]. (array 
has size R). Do the same thing as key counting except moving down instead of move up (backwards). Determine 
the position of where each element would start ...
Hint:   first compute the frequency counts for each integer, which tells you where the keys need to go. Then 
cyclically permute the keys into their proper places.

3.
Q:  Cyclic rotations. Two strings s and t are cyclic rotations of one another if they have the same length 
and s consists of a suffix of t followed by a prefix of t. For example, "suffixsort" and "sortsuffix" are 
cyclic rotations.
Given n distinct strings, each of length L, design an algorithm to determine whether there exists a pair of 
distinct strings that are cyclic rotations of one another. For example, the following list of n=12 strings 
of length L=10 contains exactly one pair of strings ("suffixsort" and "sortsuffix") that are cyclic rotations 
of one another.
    algorithms polynomial sortsuffix boyermoore
    structures minimumcut suffixsort stackstack
    binaryheap digraphdfs stringsort digraphbfs
The order of growth of the running time should be nL^2(or better) in the worst case. Assume that the alphabet 
size R is a small constant.
Signing bonus. Do it in NnL time in the worst case.
A:  Use some kind of suffix array but instead of removing the prefix add to the back. I don't know the 
actual algorithm -> couldn't figure it out. For the signing bonus I don't know what N is.
Hint:   define a fingerprint of a string in such a way that two strings are cyclic rotations of one another 
if and only if they have the same fingerprint. Signing Bonus: design an algorithm to find the fingerprint of 
a string of length L in time proportional to L in the worst case.