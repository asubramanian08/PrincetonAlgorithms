1.
Q:  Ternary Huffman codes. Generalize the Huffman algorithm to codewords over the ternary alphabet (0, 1, and 2) 
instead of the binary alphabet. That is, given a byte-stream, find a prefix-free ternary code that uses as few 
trits (0s, 1s, and 2s) as possible. Prove that it yields optimal prefix-free ternary code.
A:  This is similar to the original Huffman coding algorithm. Instead of picking the smallest 2 sub-tries, pick 
the smallest 3. Number the connections accordingly. Everything else with fall into place with the new trie. For 
example searching with be looking through 3 branches and choosing one instead of 2.
Hint:   Combine smallest 3 probabilities at each step (instead of smallest 2). Don't forget to handle the case 
when the number of symbols is not of the form 3+2k for some integer k.

2.
Q:  
- Identify an optimal uniquely-decodable code that is neither prefix free nor suffix tree.
- Identify two optimal prefix-free codes for the same input that have a different distribution of codeword 
lengths.
A:  ? -> don't understand question
Hint:   NA

3.
Q:  Move-to-front coding. Design an algorithm to implement move-to-front encoding so that each operation takes 
logarithmic time in the worst case. That is, maintain alphabet of symbols in a list. A symbol is encoded as the 
number of symbols that precede it in the list. After encoding a symbol, move it to the front of the list.
A:  Use a red black or some other self balancing BST. Make some array of symbols and encode the symbol by finding 
the position of the symbol from the BST (rank). After that to move it to the front, get the min value already in 
the BST subtract one from it and add the new symbol's value into the BST.
Hint:   NA