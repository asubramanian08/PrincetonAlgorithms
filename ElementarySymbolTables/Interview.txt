1.
Q:  Java auto-boxing and equals(). Consider two double values a and b and their corresponding Double values 
x and y.
 - Find values such that (a==b) is true but x.equals(y) is false.
 - Find values such that (a==b) is false but x.equals(y) is true.
A:  Part A: a is 0 and b is negative 0, Part B: One of the values if null??
Hint:   IEEE floating point arithmetic has some peculiar rules for 0.0, âˆ’0.0, and NaN. Java requires that 
equals() implements an equivalence relation.

2.
Q:  Check if a binary tree is a BST. Given a binary tree where each Node contains a key, determine whether 
it is a binary search tree. Use extra space proportional to the height of the tree.
A:  Recursively loop though the tree ensuring that the right and left nodes (if they are there) are greater 
and less than the current node respectively. Then call the function for both nodes (if they exist).
Hint:   design a recursive function isBST(Nodex,Keymin,Keymax) that determines whether x is the root of a 
binary search tree with all keys between min and max.

3.
Q:  Inorder traversal with constant extra space. Design an algorithm to perform an inorder traversal of a 
binary search tree using only a constant amount of extra space.
A:  ?
Hint:   you may modify the BST during the traversal provided you restore it upon completion.

4.
Q:  Web tracking. Suppose that you are tracking n web sites and m users and you want to support the following 
API:
 - User visits a website.
 - How many times has a given user visited a given site?
What data structure or data structures would you use?
A:  You can use a BST but the key will be a user on a website and the value will be the number of times the 
user visits the website.
Hint:   maintain a symbol table of symbol tables.