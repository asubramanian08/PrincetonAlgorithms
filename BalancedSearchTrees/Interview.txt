1.
Q:  Red–black BST with no extra memory. Describe how to save the memory for storing the color information 
when implementing a red–black BST. 
A:  ?
Hint:   modify the structure of the BST to encode the color information. (Modify to lowest bit of memory - 
not in their answer)

2.
Q:  Document search. Design an algorithm that takes a sequence of n document words and a sequence of m query 
words and find the shortest interval in which the m query words appear in the document in the order given. 
The length of an interval is the number of words in that interval.
A:  Have an array of size m. Loop through the n elements. When the first of the m words is found make the 0th 
element in the array, the index into the document words. If the first word is found again update its index to 
the most recent position it was found in. When the second word is found updates the value in the 1st element 
to whatever the value in the 0th element is. (Words found out of order will be disregarded.) Keep doing this 
until the last element is found. Then update minimum range to the distance between the value of the last 
element in the array and the current position (+1). If the range found is greater than the pre-existing 
minimum range, don't change the minimum range. In order to find what elements of the query words a current 
word refers to, use a red-black tree or any other kind of efficient symbol table. The symbol table should be 
able to support multiple values for a key.
Hint:    for each word, maintain a sorted list of the indices in the document in which that word appears. 
Scan through the sorted lists of the query words in a judicious manner.

3.
Q:  Generalized queue. Design a generalized queue data type that supports all of the following operations in 
logarithmic time (or better) in the worst case.
 - Create an empty data structure.
 - Append an item to the end of the queue.
 - Remove an item from the front of the queue.
 - Return the ith item in the queue.
 - Remove the ith item from the queue.
A:  The generalized queue can be written as a red-black tree. The only specialization for this tree is to 
store the number of nodes under a node in the tree. The key with be of a new added element will be a 
counter++. (This counter doesn't decreases when an element is removed so that every key can be distinct.) Use 
the number of nodes in each branch to determine the i_th element. Every one in a while reset the count to the 
number of elements currently in the tree and reset the keys of those elements to fill in gaps. All other 
operations will be normal but make sure that the number of nodes under a tree is always updated.
Hint:   create a red–black BST where the keys are integers and the values are the items such that the ith 
largest integer key in the red–black BST corresponds to the ith item in the queue.